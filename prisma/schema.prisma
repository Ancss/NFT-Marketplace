// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             Int      @id @default(autoincrement())
  accountAddress String   @unique
  username       String?
  email          String?
  description    String?
  website        String?
  facebook       String?
  twitter        String?
  instagram      String?
  avatar         String?
  likes          Like[]
  nfts           NFT[]
  createAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model NFT {
  id             Int      @id @default(autoincrement())
  tokenId        String   @unique
  seller         String
  owner          String
  price          String
  sold           Boolean
  tokenURI       String
  name           String
  image          String
  description    String
  likes          Like[] // Array of likes
  Account        Account? @relation(fields: [accountId], references: [id])
  accountId      Int?
  accountAddress String
  createAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Like {
  id         Int      @id @default(autoincrement())
  liked      Int      @default(-1) // 1 if liked, 0 if disliked, -1 if not touch
  createAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  NFT        NFT?     @relation(fields: [nFTTokenId], references: [tokenId])
  nFTTokenId String?
  Account    Account? @relation(fields: [accountAddress], references: [accountAddress])
  accountAddress  String?
}
